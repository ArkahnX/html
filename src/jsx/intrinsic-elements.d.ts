declare namespace JSX {

    type Element = string;

    interface IntrinsicElements {
        a: HtmlAnchorElement;
        abbr: HtmlElement;
        address: HtmlElement;
        area: HtmlAreaElement;
        article: HtmlElement;
        aside: HtmlElement;
        audio: HtmlAudioElement;
        b: HtmlElement;
        bb: HtmlBrowserButtonElement;
        base: BaseElement;
        bdi: HtmlElement;
        bdo: HtmlElement;
        blockquote: HtmlQuoteElement;
        body: HtmlBodyElement;
        br: HtmlElement;
        button: HtmlButtonElement;
        canvas: HtmlCanvasElement;
        caption: HtmlElement;
        cite: HtmlElement;
        code: HtmlElement;
        col: HtmlTableColElement;
        colgroup: HtmlTableColElement;
        commands: HtmlCommandElement;
        data: DataElement;
        datalist: HtmlDataListElement;
        dd: HtmlElement;
        del: HtmlModElement;
        details: HtmlDetailsElement;
        dfn: HtmlElement;
        div: HtmlElement;
        dl: HtmlElement;
        dt: HtmlElement;
        em: HtmlElement;
        embed: HtmlEmbedElement;
        fieldset: HtmlFieldSetElement;
        figcaption: HtmlElement;
        figure: HtmlElement;
        footer: HtmlElement;
        form: HtmlFormElement;
        h1: HtmlElement;
        h2: HtmlElement;
        h3: HtmlElement;
        h4: HtmlElement;
        h5: HtmlElement;
        h6: HtmlElement;
        head: HtmlElement;
        header: HtmlElement;
        hr: HtmlElement;
        html: HTMLElement;
        i: HtmlElement;
        iframe: HtmlIFrameElement;
        img: HtmlImageElement;
        input: HtmlInputElement;
        ins: HtmlModElement;
        kbd: HtmlElement;
        keygen: KeygenElement;
        label: HtmlLabelElement;
        legend: HtmlLegendElement;
        li: HtmlLIElement ;
        link: HtmlLinkElement;
        main: HtmlElement;
        map: HtmlMapElement;
        mark: HtmlElement;
        menu: HtmlMenuElement;
        meta: HtmlMetaElement;
        meter: HtmlMeterElement;
        nav: HtmlElement;
        noscript: HtmlElement;
        object: HtmlObjectElement;
        ol: HtmlOListElement ;
        optgroup: HtmlOptgroupElement;
        option: HtmlOptionElement;
        output: HtmlOutputElement;
        p: HtmlElement;
        param: HtmlParamElement;
        pre: HtmlElement;
        progress: HtmlProgressElement;
        q: HtmlQuoteElement;
        rb: HtmlElement;
        rp: HtmlElement;
        rt: HtmlElement;
        rtc: HtmlElement;
        ruby: HtmlElement;
        s: HtmlElement;
        samp: HtmlElement;
        script: HtmlScriptElement;
        section: HtmlElement;
        select: HtmlSelectElement;
        small: HtmlElement;
        source: HtmlSourceElement;
        span: HtmlElement;
        strong: HtmlElement;
        style: HtmlStyleElement;
        sub: HtmlElement;
        sup: HtmlElement;
        table: HtmlTableElement;
        tbody: HtmlElement;
        td: HtmlTableDataCellElement ;
        template: HtmlElement;
        textarea: HtmlTextAreaElement;
        tfoot: HtmlTableSectionElement;
        th: HtmlTableHeaderCellElement;
        thead: HtmlTableSectionElement;
        time: HtmlTimeElement;
        title: HtmlElement;
        tr: HtmlTableRowElement;
        track: HtmlTrackElement;
        u: HtmlElement;
        ul: HtmlElement;
        var: HtmlElement;
        video: HtmlVideoElement
        wbr: HtmlElement;

        // SVG
        // svg: React.SVGProps<SVGSVGElement>;

        // animate: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now.
        // circle: React.SVGProps<SVGCircleElement>;
        // clipPath: React.SVGProps<SVGClipPathElement>;
        // defs: React.SVGProps<SVGDefsElement>;
        // desc: React.SVGProps<SVGDescElement>;
        // ellipse: React.SVGProps<SVGEllipseElement>;
        // feBlend: React.SVGProps<SVGFEBlendElement>;
        // feColorMatrix: React.SVGProps<SVGFEColorMatrixElement>;
        // feComponentTransfer: React.SVGProps<SVGFEComponentTransferElement>;
        // feComposite: React.SVGProps<SVGFECompositeElement>;
        // feConvolveMatrix: React.SVGProps<SVGFEConvolveMatrixElement>;
        // feDiffuseLighting: React.SVGProps<SVGFEDiffuseLightingElement>;
        // feDisplacementMap: React.SVGProps<SVGFEDisplacementMapElement>;
        // feDistantLight: React.SVGProps<SVGFEDistantLightElement>;
        // feFlood: React.SVGProps<SVGFEFloodElement>;
        // feFuncA: React.SVGProps<SVGFEFuncAElement>;
        // feFuncB: React.SVGProps<SVGFEFuncBElement>;
        // feFuncG: React.SVGProps<SVGFEFuncGElement>;
        // feFuncR: React.SVGProps<SVGFEFuncRElement>;
        // feGaussianBlur: React.SVGProps<SVGFEGaussianBlurElement>;
        // feImage: React.SVGProps<SVGFEImageElement>;
        // feMerge: React.SVGProps<SVGFEMergeElement>;
        // feMergeNode: React.SVGProps<SVGFEMergeNodeElement>;
        // feMorphology: React.SVGProps<SVGFEMorphologyElement>;
        // feOffset: React.SVGProps<SVGFEOffsetElement>;
        // fePointLight: React.SVGProps<SVGFEPointLightElement>;
        // feSpecularLighting: React.SVGProps<SVGFESpecularLightingElement>;
        // feSpotLight: React.SVGProps<SVGFESpotLightElement>;
        // feTile: React.SVGProps<SVGFETileElement>;
        // feTurbulence: React.SVGProps<SVGFETurbulenceElement>;
        // filter: React.SVGProps<SVGFilterElement>;
        // foreignObject: React.SVGProps<SVGForeignObjectElement>;
        // g: React.SVGProps<SVGGElement>;
        // image: React.SVGProps<SVGImageElement>;
        // line: React.SVGProps<SVGLineElement>;
        // linearGradient: React.SVGProps<SVGLinearGradientElement>;
        // marker: React.SVGProps<SVGMarkerElement>;
        // mask: React.SVGProps<SVGMaskElement>;
        // metadata: React.SVGProps<SVGMetadataElement>;
        // path: React.SVGProps<SVGPathElement>;
        // pattern: React.SVGProps<SVGPatternElement>;
        // polygon: React.SVGProps<SVGPolygonElement>;
        // polyline: React.SVGProps<SVGPolylineElement>;
        // radialGradient: React.SVGProps<SVGRadialGradientElement>;
        // rect: React.SVGProps<SVGRectElement>;
        // stop: React.SVGProps<SVGStopElement>;
        // switch: React.SVGProps<SVGSwitchElement>;
        // symbol: React.SVGProps<SVGSymbolElement>;
        // text: React.SVGProps<SVGTextElement>;
        // textPath: React.SVGProps<SVGTextPathElement>;
        // tspan: React.SVGProps<SVGTSpanElement>;
        // use: React.SVGProps<SVGUseElement>;
        // view: React.SVGProps<SVGViewElement>;
    }

}